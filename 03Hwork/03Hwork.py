# 1. Найти НОК двух чисел
#

# print('###### HW3 - Задание 1 ######')
# import sys
# def Nok(number1, number2):
#     break_out_flag = False
#     # NOK_number = 1
#     for i in range(1, sys.maxsize**10):
#         if (i % number1 == 0) and (i % number2 == 0):
#             # i = NOK_number
#             print(i)
#             break_out_flag = True
#             return i
#         if break_out_flag:
#             break
# print('Введите  число Number 1 = ')
# number11 = int(input())
# print('Введите  число Number 2 = ')
# number22 = int(input())
# print(number11, number22)
# print(f'НОК двух чисел = {Nok(number11, number22)}\n')
# print('******************************\n')


# 2. Вычислить число Пи c заданной точностью d
# Пример: при d = 0.001,  c= 3.141.

# print('###### HW3 - Задание 2 ######')
# import math
# print('Введите  число заданной точности d = ')
# exact_number = float(input())
# Pi_exact = (math.pi // exact_number)*exact_number
# print(f'Нчисло Пи c заданной точностью d = {Pi_exact}\n')
# print('******************************\n')


# 3. Составить список простых множителей натурального числа N
#

# print('###### HW3 - Задание 3 ######')
# def find_prime_divisor(number, n_div):
#     for j in range(2, number+1):
#         if number % j == 0 and number >= j:
#             n_div.extend([j])
#             find_prime_divisor(number // j, n_div)
#             return n_div
# n_div = [1]
# print('Введите натуральноt число N = ')
# number = int(input())
# print(f'список простых множителей = {find_prime_divisor(number, n_div)}\n')
# print('******************************\n')


# 4. Дана последовательность чисел. Получить список неповторяющихся элементов исходной последовательности
# Пример: [1, 2, 3, 5, 1, 5, 3, 10] => [1, 2, 3, 5, 10]
#

# print('###### HW3 - Задание 4 ######')
# list_numb = [1, 2, 3, 5, 1, 5, 3, 10, 10, 10, 3, 3, 3, 3]
# print(list_numb)
# def list_non_repeat_elem(list1):
#     new_list2 = list1.copy()
#     for x in range(0, len(list1)):
#         for y in range(x+1, len(list1)):
#             if list1[x] == list1[y]:
#                 new_list2[y] = 0
#     for val in new_list2:
#         if val == 0:
#             new_list2.remove(0)
#     while new_list2[-1] == 0:
#         new_list2.pop(-1)
#     return new_list2
# print(f'список неповторяющихся элементов исходной последовательности =\n {list_non_repeat_elem(list_numb)}\n')
# print('******************************\n')




# + на тему файловой системы:
# 5.  Дан текстовый файл, содержащий целые числа. Удалить из него все четные числа.
#

print('###### HW3 - Задание 5 ######')



print(f'список неповторяющихся элементов исходной последовательности =\n {list_non_repeat_elem(list_numb)}\n')
print('******************************\n')




# Экстра-задачи:
# 1. Определите функцию, которая принимает римскую цифру в качестве аргумента и возвращает ее значение в виде числового десятичного целого числа. Вам не нужно проверять форму римской цифры.
# Современные римские цифры записываются путем выражения каждой десятичной цифры числа, которое должно быть закодировано отдельно, начиная с самой левой цифры. Таким образом, 1990 отображается "MCMXC" (1000 = M, 900 = CM, 90 = XC), а 2008 отображается "MMVIII" (2000 = MM, 8 = VIII). Римская цифра для 1666, "MDCLXVI", использует каждую букву в порядке убывания.
# Пример: имя_вашей_функции ('XXI') # должно вернуть 21
#
# 2. Определите функцию, которая удаляет весь текст, следующий за любым из переданных маркеров комментариев. Любые пробелы в конце строки также должны быть удалены.
# Пример:
# Входные данные:
# «apples, pears # and bananas
# grapes
# bananas !apples          »
# Выходные данные:
# «apples, pears
# grapes
# bananas»
# Функция может вызываться вот так:
# result = function("apples, pears # and bananas\ngrapes\nbananas !apples", ["#", "!"])
#
# Начиная в вершине треугольника (см. пример ниже) и перемещаясь вниз на смежные числа, максимальная сумма до основания составляет 23.
#
# 4.Задание:
# 3
# 7 4
# 2 4 6
# 8 5 9 3
# То есть, 3 + 7 + 4 + 9 = 23.
# Найдите максимальную сумму пути от вершины до основания следующего треугольника:
# 75
# 95 64
# 17 47 82
# 18 35 87 10
# 20 04 82 47 65
# 19 01 23 75 03 34
# 88 02 77 73 07 63 67
# 99 65 04 28 06 16 70 92
# 41 41 26 56 83 40 80 70 33
# 41 48 72 33 47 32 37 16 94 29
# 53 71 44 65 25 43 91 52 97 51 14
# 70 11 33 28 77 73 17 78 39 68 17 57
# 91 71 52 38 17 14 91 43 58 50 27 29 48
# 63 66 04 68 89 53 67 30 73 16 69 87 40 31
# 04 62 98 27 23 09 70 98 73 93 38 53 60 04 23
#
# 4 . Сумма квадратов первых десяти натуральных чисел равна
# 12 + 22 + ... + 102 = 385
# Квадрат суммы первых десяти натуральных чисел равен
# (1 + 2 + ... + 10)2 = 552 = 3025
# Следовательно, разность между суммой квадратов и квадратом суммы первых десяти натуральных чисел составляет 3025 − 385 = 2640.
# Найдите разность между суммой квадратов и квадратом суммы первых ста натуральных чисел.